//Using two queues. Brute solution

class MyStack {
public:
        queue<int>q1;
        queue<int>q2;
    
    MyStack() {

    }
    
    void push(int x) {
        q2.push(x);
        while(!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
        }
        
        while(!q2.empty())
        {
            q1.push(q2.front());
            q2.pop();
        }
    }
    
    int pop() {
        int x=q1.front();
        q1.pop();
        return x;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        if(q1.empty())
            return true;
        else
            return false;
    }
};








//Using one queue(optimal method)

class MyStack {
public:
        queue<int>q;
    
    MyStack() {

    }
    
    void push(int x) {
        q.push(x);

        for(int i=0;i<q.size()-1;i++)
        {
            q.push(q.front());
            q.pop();
        }
    }
    
    int pop() {
        int x=q.front();
        q.pop();
        return x;
    }
    
    int top() {
        return q.front();
    }
    
    bool empty() {
        if(q.empty())
            return true;
        else
            return false;
    }
};


