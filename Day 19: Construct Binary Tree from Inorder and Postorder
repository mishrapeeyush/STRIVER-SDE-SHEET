
class Solution {
public:
    TreeNode *solve(vector<int>inorder,int inStart, int inEnd,
                    vector<int>postorder, int postStart,int postEnd,unordered_map<int,int> &m)
    {
        if((postStart>postEnd)||(inStart>inEnd))
            return NULL;
        
        TreeNode* root=new TreeNode(postorder[postEnd]);
        
        int inRoot=m[root->val];
        int numsLeft=inRoot-inStart;
        
        root->left=solve(inorder,inStart,inRoot-1,postorder,postStart,postStart+numsLeft-1,m);
        root->right=solve(inorder,inRoot+1,inEnd,postorder,postStart+numsLeft,postEnd-1,m);
        
        return root;
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int>m;
        
        if(inorder.size()!=postorder.size())
            return NULL;
        
        for(int i=0;i<inorder.size();i++)
            m[inorder[i]]=i;
        
        TreeNode* root= solve(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,m);
        return root;
    }
};
