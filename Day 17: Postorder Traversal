//Recursive Solution

class Solution {
public:
    void postorder(TreeNode* root, vector<int>&v)
    {
        if(!root) return;
        

            postorder(root->left,v);
            postorder(root->right,v);
            v.push_back(root->val);
    }
    
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>v;
        postorder(root,v);
        return v; 
    }
};



//Iterative Solution using 2 stacks

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        
        vector<int>v;
        if(!root) return v;
        
        stack<TreeNode*>st1;
        stack<TreeNode*>st2;
        
        st1.push(root);
        
        while(!st1.empty())
        {
            root=st1.top();
            st2.push(root);
            st1.pop();
            
            if(root->left)
                st1.push(root->left);
            
            if(root->right)
                st1.push(root->right);
        }
        
        
        vector<int>ans;
        while(!st2.empty())
        {
            TreeNode* root=st2.top();
            st2.pop();
            ans.push_back(root->val);
        }
        
        return ans;
    }
    
};
